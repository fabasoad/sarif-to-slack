/**
 * Sarif to Slack message converter library.
 *
 * @remarks
 * This library provides a service to send a Slack messages based on the provided
 * SARIF (Static Analysis Results Interchange Format) files.
 *
 * @example
 * ```typescript
 * import { SarifToSlackService } from 'sarif-to-slack';
 *
 * const service = new SarifToSlackService({
 *   webhookUrl: 'https://hooks.slack.com/services/your/webhook/url',
 *   sarifPath: 'path/to/your/sarif/file.sarif',
 *   logLevel: 'info',
 *   username: 'SARIF Bot',
 *   iconUrl: 'https://example.com/icon.png',
 *   color: '#36a64f',
 *   header: {
 *     include: true,
 *     value: 'SARIF Analysis Results'
 *   },
 *   footer: {
 *     include: true,
 *     value: 'Generated by @fabasoad/sarif-to-slack'
 *   },
 *   actor: {
 *     include: true,
 *     value: 'fabasoad'
 *   },
 *   run: {
 *     include: true
 *   },
 * });
 * await service.sendAll();
 * ```
 *
 * @see {@link SarifToSlackService}
 *
 * @packageDocumentation
 */

import type { Log } from 'sarif';

/**
 * Type representing properties that indicate whether to include certain information
 * in the Slack message.
 * @public
 */
export declare type IncludeAwareProps = {
    include: boolean;
};

/**
 * Type representing properties that indicate whether to include certain information
 * in the Slack message, along with an optional value.
 * @public
 */
export declare type IncludeAwareWithValueProps = IncludeAwareProps & {
    value?: string;
};

/**
 * Enum representing log levels for the service.
 * @public
 */
export declare enum LogLevel {
    /**
     * Represents the most verbose logging level, typically used for detailed debugging information.
     */
    Silly = 0,
    /**
     * Represents a logging level for tracing the flow of the application.
     */
    Trace = 1,
    /**
     * Represents a logging level for debugging information that is less verbose than silly.
     */
    Debug = 2,
    /**
     * Represents a logging level for general informational messages that highlight the progress of the application.
     */
    Info = 3,
    /**
     * Represents a logging level for potentially harmful situations that require attention.
     */
    Warning = 4,
    /**
     * Represents a logging level for error conditions that do not require immediate action but should be noted.
     */
    Error = 5,
    /**
     * Represents a logging level for critical errors that require immediate attention and may cause the application to terminate.
     */
    Fatal = 6
}

/**
 * Type representing a SARIF log.
 * @public
 */
export declare type Sarif = Log;

/**
 * Service to convert SARIF files to Slack messages and send them.
 * @public
 */
export declare class SarifToSlackService {
    private _slackMessages;
    private constructor();
    /**
     * Gets the Slack messages prepared for each SARIF file.
     * @returns A read-only map where keys are SARIF file paths and values are SlackMessage instances.
     * @public
     */
    get slackMessages(): ReadonlyMap<string, SlackMessage>;
    /**
     * Creates an instance of SarifToSlackService.
     * @param opts - Options for the service, including webhook URL, SARIF path, and other configurations.
     * @returns A promise that resolves to an instance of SarifToSlackService.
     * @throws Error if no SARIF files are found at the provided path.
     * @public
     */
    static create(opts: SarifToSlackServiceOptions): Promise<SarifToSlackService>;
    /**
     * Sends all prepared Slack messages.
     * @returns A promise that resolves when all messages have been sent.
     * @throws Error if a Slack message was not prepared for a SARIF path.
     * @public
     */
    sendAll(): Promise<void>;
    /**
     * Sends a Slack message for a specific SARIF path.
     * @param sarifPath - The path of the SARIF file for which the message should be sent.
     * @returns A promise that resolves when the message has been sent.
     * @throws Error if a Slack message was not prepared for the given SARIF path.
     * @public
     */
    send(sarifPath: string): Promise<void>;
}

/**
 * Options for the SarifToSlackService.
 * @public
 */
export declare type SarifToSlackServiceOptions = {
    webhookUrl: string;
    sarifPath: string;
    username?: string;
    iconUrl?: string;
    color?: string;
    logLevel?: LogLevel | string;
    header?: IncludeAwareWithValueProps;
    footer?: IncludeAwareWithValueProps;
    actor?: IncludeAwareWithValueProps;
    run?: IncludeAwareProps;
};

/**
 * Interface for a Slack message that can be sent.
 * @public
 */
export declare interface SlackMessage {
    /**
     * Sends the Slack message.
     * @returns A promise that resolves to the response from the Slack webhook.
     */
    send: () => Promise<string>;
    /**
     * The SARIF log associated with this Slack message.
     */
    sarif: Sarif;
}

export { }
