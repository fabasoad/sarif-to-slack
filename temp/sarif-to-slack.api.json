{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.8",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "sarif-to-slack!",
  "docComment": "/**\n * Sarif to Slack message converter library.\n *\n * @remarks\n *\n * This library provides a service to send a Slack messages based on the provided SARIF (Static Analysis Results Interchange Format) files.\n *\n * @example\n * ```typescript\n * import { SarifToSlackService } from 'sarif-to-slack';\n *\n * const service = new SarifToSlackService({\n *   webhookUrl: 'https://hooks.slack.com/services/your/webhook/url',\n *   sarifPath: 'path/to/your/sarif/file.sarif',\n *   logLevel: 'info',\n *   username: 'SARIF Bot',\n *   iconUrl: 'https://example.com/icon.png',\n *   color: '#36a64f',\n *   header: {\n *     include: true,\n *     value: 'SARIF Analysis Results'\n *   },\n *   footer: {\n *     include: true,\n *     value: 'Generated by @fabasoad/sarif-to-slack'\n *   },\n *   actor: {\n *     include: true,\n *     value: 'fabasoad'\n *   },\n *   run: {\n *     include: true\n *   },\n * });\n * await service.sendAll();\n * ```\n *\n * @see\n *\n * {@link SarifToSlackService}\n *\n * @packageDocumentation\n */\n",
  "name": "sarif-to-slack",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "sarif-to-slack!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "sarif-to-slack!IncludeAwareProps:type",
          "docComment": "/**\n * Type representing properties that indicate whether to include certain information in the Slack message.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IncludeAwareProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    include: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "IncludeAwareProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "sarif-to-slack!IncludeAwareWithValueProps:type",
          "docComment": "/**\n * Type representing properties that indicate whether to include certain information in the Slack message, along with an optional value.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IncludeAwareWithValueProps = "
            },
            {
              "kind": "Reference",
              "text": "IncludeAwareProps",
              "canonicalReference": "sarif-to-slack!IncludeAwareProps:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    value?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "IncludeAwareWithValueProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "sarif-to-slack!LogLevel:enum",
          "docComment": "/**\n * Enum representing log levels for the service.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum LogLevel "
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "LogLevel",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Debug:member",
              "docComment": "/**\n * Represents a logging level for debugging information that is less verbose than silly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Debug = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Debug"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Error:member",
              "docComment": "/**\n * Represents a logging level for error conditions that do not require immediate action but should be noted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Error = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Error"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Fatal:member",
              "docComment": "/**\n * Represents a logging level for critical errors that require immediate attention and may cause the application to terminate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Fatal = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Fatal"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Info:member",
              "docComment": "/**\n * Represents a logging level for general informational messages that highlight the progress of the application.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Info = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Info"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Silly:member",
              "docComment": "/**\n * Represents the most verbose logging level, typically used for detailed debugging information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Silly = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Silly"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Trace:member",
              "docComment": "/**\n * Represents a logging level for tracing the flow of the application.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Trace = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Trace"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "sarif-to-slack!LogLevel.Warning:member",
              "docComment": "/**\n * Represents a logging level for potentially harmful situations that require attention.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Warning = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Warning"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "sarif-to-slack!Sarif:type",
          "docComment": "/**\n * Type representing a SARIF log.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Sarif = "
            },
            {
              "kind": "Reference",
              "text": "Log",
              "canonicalReference": "@types/sarif!Log:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "Sarif",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "sarif-to-slack!SarifToSlackService:class",
          "docComment": "/**\n * Service to convert SARIF files to Slack messages and send them.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SarifToSlackService "
            }
          ],
          "fileUrlPath": "src/SarifToSlackService.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SarifToSlackService",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "sarif-to-slack!SarifToSlackService.create:member(1)",
              "docComment": "/**\n * Creates an instance of SarifToSlackService.\n *\n * @param opts - Options for the service, including webhook URL, SARIF path, and other configurations.\n *\n * @returns A promise that resolves to an instance of SarifToSlackService.\n *\n * @throws\n *\n * Error if no SARIF files are found at the provided path.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(opts: "
                },
                {
                  "kind": "Reference",
                  "text": "SarifToSlackServiceOptions",
                  "canonicalReference": "sarif-to-slack!SarifToSlackServiceOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SarifToSlackService",
                  "canonicalReference": "sarif-to-slack!SarifToSlackService:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "opts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "sarif-to-slack!SarifToSlackService#send:member(1)",
              "docComment": "/**\n * Sends a Slack message for a specific SARIF path.\n *\n * @param sarifPath - The path of the SARIF file for which the message should be sent.\n *\n * @returns A promise that resolves when the message has been sent.\n *\n * @throws\n *\n * Error if a Slack message was not prepared for the given SARIF path.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(sarifPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sarifPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "sarif-to-slack!SarifToSlackService#sendAll:member(1)",
              "docComment": "/**\n * Sends all prepared Slack messages.\n *\n * @returns A promise that resolves when all messages have been sent.\n *\n * @throws\n *\n * Error if a Slack message was not prepared for a SARIF path.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendAll(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "sendAll"
            },
            {
              "kind": "Property",
              "canonicalReference": "sarif-to-slack!SarifToSlackService#slackMessages:member",
              "docComment": "/**\n * Gets the Slack messages prepared for each SARIF file.\n *\n * @returns A read-only map where keys are SARIF file paths and values are SlackMessage instances.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get slackMessages(): "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMap",
                  "canonicalReference": "!ReadonlyMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "SlackMessage",
                  "canonicalReference": "sarif-to-slack!SlackMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "slackMessages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "sarif-to-slack!SarifToSlackServiceOptions:type",
          "docComment": "/**\n * Options for the SarifToSlackService.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SarifToSlackServiceOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    webhookUrl: string;\n    sarifPath: string;\n    username?: string;\n    iconUrl?: string;\n    color?: string;\n    logLevel?: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "sarif-to-slack!LogLevel:enum"
            },
            {
              "kind": "Content",
              "text": " | string;\n    header?: "
            },
            {
              "kind": "Reference",
              "text": "IncludeAwareWithValueProps",
              "canonicalReference": "sarif-to-slack!IncludeAwareWithValueProps:type"
            },
            {
              "kind": "Content",
              "text": ";\n    footer?: "
            },
            {
              "kind": "Reference",
              "text": "IncludeAwareWithValueProps",
              "canonicalReference": "sarif-to-slack!IncludeAwareWithValueProps:type"
            },
            {
              "kind": "Content",
              "text": ";\n    actor?: "
            },
            {
              "kind": "Reference",
              "text": "IncludeAwareWithValueProps",
              "canonicalReference": "sarif-to-slack!IncludeAwareWithValueProps:type"
            },
            {
              "kind": "Content",
              "text": ";\n    run?: "
            },
            {
              "kind": "Reference",
              "text": "IncludeAwareProps",
              "canonicalReference": "sarif-to-slack!IncludeAwareProps:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "SarifToSlackServiceOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "sarif-to-slack!SlackMessage:interface",
          "docComment": "/**\n * Interface for a Slack message that can be sent.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlackMessage "
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "SlackMessage",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "sarif-to-slack!SlackMessage#sarif:member",
              "docComment": "/**\n * The SARIF log associated with this Slack message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sarif: "
                },
                {
                  "kind": "Reference",
                  "text": "Sarif",
                  "canonicalReference": "sarif-to-slack!Sarif:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sarif",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "sarif-to-slack!SlackMessage#send:member",
              "docComment": "/**\n * Sends the Slack message.\n *\n * @returns A promise that resolves to the response from the Slack webhook.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "send",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
