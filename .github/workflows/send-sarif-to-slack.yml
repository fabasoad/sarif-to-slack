---
name: Send SARIF to Slack

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      sarif:
        description: SARIF to send
        required: true
        default: "Snyk Yarn (Error: 30, Warning: 16, Note: 3)"
        type: choice
        options:
          - "CodeQL C# (Unknown: 1)"
          - "CodeQL Go (Unknown: 1)"
          - "CodeQL Python (Unknown: 1)"
          - "CodeQL Ruby (Unknown: 4)"
          - "CodeQL TypeScript (Unknown: 1)"
          - "Grype Container (Error: 10, Warning: 20, Note: 9)"
          - "Snyk Composer (Error: 15, Warning: 5)"
          - "Snyk Container (Error: 1, Note: 3)"
          - "Snyk Gomodules (Error: 4, Warning: 4)"
          - "Snyk Gradle (Error: 3, Warning: 1)"
          - "Snyk Hex (Error: 1)"
          - "Snyk Maven (Error: 3, Warning: 1)"
          - "Snyk NPM (Error: 6, Warning: 6, Note: 2)"
          - "Snyk Nuget (Error: 1)"
          - "Snyk Pip (Warning: 1)"
          - "Snyk PNPM (Error: 1)"
          - "Snyk Poetry (Error: 6, Warning: 21, Note: 2)"
          - "Snyk Rubygems (Error: 1, Warning: 5)"
          - "Snyk Sbt (Error: 2, Warning: 1)"
          - "Snyk Swift (Warning: 2)"
          - "Snyk Yarn (Error: 30, Warning: 16, Note: 3)"
          - "Trivy IaC (Error: 1, Note: 1)"
          - "Wiz Container (Error: 12, Warning: 369, Note: 191)"
          - "Wiz IaC (Warning: 5, Note: 5)"
          - "Runs: 1, Tools: 1, Results: 0"
          - "Runs: 2, Tools: 1, Results > 0"
          - "Runs: 2, Tools: 1, Results: 0"
          - "Runs: 2, Tools: 2, Results > 0"
          - "Runs: 2, Tools: 2, Results: 0"
          - "Runs: 3, Tools: 2, Results > 0"
          - "Runs: 3, Tools: 2, Results: 0"
          - "All"
      group-by:
        description: "Group results by:"
        required: false
        default: "Tool name"
        type: choice
        options:
          - "Tool name"
          - "Run"
          - "Total"
      calculate-by:
        description: "Calculate results by:"
        required: false
        default: "Level"
        type: choice
        options:
          - "Level"
          - "Severity"
      log-level:
        description: "Log level:"
        required: false
        default: info
        type: choice
        options:
          - silly
          - trace
          - debug
          - info
          - warning
          - error
          - fatal
      color:
        description: "Slack message color (hex):"
        required: false
        default: "#ff0000"
        type: string
      username:
        description: "Slack message username:"
        required: false
        type: string
      header:
        description: |
          Header (leave empty for default value, set to "skip" to not include it,
          or set to any string to use it as a header):
        required: false
        default: "skip"
        type: string
      footer:
        description: |
          Footer (leave empty for default value, set to "skip" to not include it,
          or set to any string to use it as a footer):
        required: false
        type: string
      actor:
        description: |
          Actor (leave empty for default value, set to "skip" to not include it,
          or set to any string to use it as an actor):
        required: false
        default: "skip"
        type: string
      include-run:
        description: Include run in the message.
        required: false
        default: true
        type: boolean

defaults:
  run:
    shell: sh

jobs:
  send-sarif:
    name: ${{ inputs.sarif }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Determine SARIF file
        id: sarif-file
        env:
          INPUT_SARIF: "${{ inputs.sarif }}"
        run: |
          if [ "${INPUT_SARIF}" = "CodeQL C# (Unknown: 1)" ]; then
            value="codeql-csharp.sarif"
          elif [ "${INPUT_SARIF}" = "CodeQL Go (Unknown: 1)" ]; then
            value="codeql-go.sarif"
          elif [ "${INPUT_SARIF}" = "CodeQL Python (Unknown: 1)" ]; then
            value="codeql-python.sarif"
          elif [ "${INPUT_SARIF}" = "CodeQL Ruby (Unknown: 4)" ]; then
            value="codeql-ruby.sarif"
          elif [ "${INPUT_SARIF}" = "CodeQL TypeScript (Unknown: 1)" ]; then
            value="codeql-typescript.sarif"
          elif [ "${INPUT_SARIF}" = "Grype Container (Error: 10, Warning: 20, Note: 9)" ]; then
            value="grype-container.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Composer (Error: 15, Warning: 5)" ]; then
            value="snyk-composer.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Container (Error: 1, Note: 3)" ]; then
            value="snyk-container.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Gomodules (Error: 4, Warning: 4)" ]; then
            value="snyk-gomodules.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Gradle (Error: 3, Warning: 1)" ]; then
            value="snyk-gradle.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Hex (Error: 1)" ]; then
            value="snyk-hex.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Maven (Error: 3, Warning: 1)" ]; then
            value="snyk-maven.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk NPM (Error: 6, Warning: 6, Note: 2)" ]; then
            value="snyk-npm.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Nuget (Error: 1)" ]; then
            value="snyk-nuget.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Pip (Warning: 1)" ]; then
            value="snyk-pip.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk PNPM (Error: 1)" ]; then
            value="snyk-pnpm.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Poetry (Error: 6, Warning: 21, Note: 2)" ]; then
            value="snyk-poetry.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Rubygems (Error: 1, Warning: 5)" ]; then
            value="snyk-rubygems.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Sbt (Error: 2, Warning: 1)" ]; then
            value="snyk-sbt.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Swift (Warning: 2)" ]; then
            value="snyk-swift.sarif"
          elif [ "${INPUT_SARIF}" = "Snyk Yarn (Error: 30, Warning: 16, Note: 3)" ]; then
            value="snyk-yarn.sarif"
          elif [ "${INPUT_SARIF}" = "Trivy IaC (Error: 1, Note: 1)" ]; then
            value="trivy-iac.sarif"
          elif [ "${INPUT_SARIF}" = "Wiz Container (Error: 12, Warning: 369, Note: 191)" ]; then
            value="wiz-container.sarif"
          elif [ "${INPUT_SARIF}" = "Wiz IaC (Warning: 5, Note: 5)" ]; then
            value="wiz-iac.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 1, Tools: 1, Results: 0" ]; then
            value="runs-1-tools-1-results-0.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 2, Tools: 1, Results > 0" ]; then
            value="runs-2-tools-1.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 2, Tools: 1, Results: 0" ]; then
            value="runs-2-tools-1-results-0.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 2, Tools: 2, Results > 0" ]; then
            value="runs-2-tools-2.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 2, Tools: 2, Results: 0" ]; then
            value="runs-2-tools-2-results-0.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 3, Tools: 2, Results > 0" ]; then
            value="runs-3-tools-2.sarif"
          elif [ "${INPUT_SARIF}" = "Runs: 3, Tools: 2, Results: 0" ]; then
            value="runs-3-tools-2-results-0.sarif"
          else
            # All
            value=""
          fi
          echo "value=${value}" >> "$GITHUB_OUTPUT"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".tool-versions"
      - name: Install dependencies
        run: npm ci
      - name: Send message
        env:
          SARIF_TO_SLACK_WEBHOOK_URL: "${{ secrets.TMP_EUGENE_SLACK_WEBHOOK }}"
          SARIF_TO_SLACK_USERNAME: "${{ inputs.username }}"
          SARIF_TO_SLACK_ICON_URL: "https://cdn-icons-png.flaticon.com/512/9070/9070006.png"
          SARIF_TO_SLACK_COLOR: "${{ inputs.color }}"
          SARIF_TO_SLACK_SARIF_FILE_NAME: "${{ steps.sarif-file.outputs.value }}"
          SARIF_TO_SLACK_LOG_LEVEL: "${{ inputs.log-level }}"
          SARIF_TO_SLACK_HEADER: "${{ inputs.header }}"
          SARIF_TO_SLACK_FOOTER: "${{ inputs.footer }}"
          SARIF_TO_SLACK_ACTOR: "${{ inputs.actor }}"
          SARIF_TO_SLACK_INCLUDE_RUN: "${{ inputs.include-run }}"
          SARIF_TO_SLACK_GROUP_BY: "${{ inputs.group-by}}"
          SARIF_TO_SLACK_CALCULATE_BY: "${{ inputs.calculate-by}}"
        run: npm run test:integration
